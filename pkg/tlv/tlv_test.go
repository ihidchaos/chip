package tlv

import (
	"bytes"
	"fmt"
	"github.com/galenliu/chip/protocols/secure_channel"
	"github.com/stretchr/testify/assert"
	"math"
	"testing"
)

var encoding = []byte{
	0xD5, 0xBB, 0xAA, 0xDD, 0xCC, 0x01, 0x00, 0xC9, 0xBB, 0xAA, 0xDD, 0xCC, 0x02, 0x00, 0x88, 0x02,
	0x00, 0x36, 0x00, 0x00, 0x2A, 0x00, 0xEF, 0x02, 0xF0, 0x67, 0xFD, 0xFF, 0x07, 0x00, 0x90, 0x2F,
	0x50, 0x09, 0x00, 0x00, 0x00, 0x15, 0x18, 0x17, 0xD4, 0xBB, 0xAA, 0xDD, 0xCC, 0x11, 0x00, 0xB4,
	0xA0, 0xBB, 0x0D, 0x00, 0x14, 0xB5, 0x00, 0x28, 0x6B, 0xEE, 0x6D, 0x70, 0x11, 0x01, 0x00, 0x0E,
	0x01, 0x53, 0x54, 0x41, 0x52, 0x54, 0x2E, 0x2E, 0x2E, 0x21, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x40, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x23, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x24, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x25, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x5E, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x26, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x2A, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x28, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x29, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x2D, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x3D, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x5B, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x5D, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x3B, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36,
	0x37, 0x27, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x2E, 0x2E, 0x2E, 0x45, 0x4E, 0x44, 0x18,
	0x18, 0x18, 0xCC, 0xBB, 0xAA, 0xDD, 0xCC, 0x05, 0x00, 0x0E, 0x54, 0x68, 0x69, 0x73, 0x20, 0x69,
	0x73, 0x20, 0x61, 0x20, 0x74, 0x65, 0x73, 0x74, 0x8A, 0xFF, 0xFF, 0x33, 0x33, 0x8F, 0x41, 0xAB,
	0x00, 0x00, 0x01, 0x00, 0x66, 0x66, 0x66, 0x66, 0x66, 0xE6, 0x31, 0x40, 0x18,
}

func WriteIntMinMax() (data []byte, err error) {
	tlvWriter := NewWriter()
	//err = tlvWriter.StartContainer(AnonymousTag(), TypeStructure)
	//if err != nil {
	//	return nil, err
	//}
	_, err = tlvWriter.StartContainer(AnonymousTag(), TypeStructure)
	if err != nil {
		return
	}
	err = tlvWriter.PutUint(ContextSpecificTag(1), math.MaxUint8)
	if err != nil {
		return
	}
	err = tlvWriter.PutUint(ContextSpecificTag(2), math.MaxUint8)
	if err != nil {
		return
	}

	err = tlvWriter.EndContainer(TypeNotSpecified)
	if err != nil {
		return
	}

	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint16)
	if err != nil {
		return
	}
	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint16)
	if err != nil {
		return
	}

	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint32)
	if err != nil {
		return
	}
	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint32)
	if err != nil {
		return
	}

	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint64)
	if err != nil {
		return
	}
	err = tlvWriter.PutUint(AnonymousTag(), math.MaxUint64)
	if err != nil {
		return
	}

	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt8)
	if err != nil {
		return
	}
	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt8)
	if err != nil {
		return
	}

	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt16)
	if err != nil {
		return
	}
	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt16)
	if err != nil {
		return
	}

	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt32)
	if err != nil {
		return
	}
	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt32)
	if err != nil {
		return
	}

	err = tlvWriter.PutInt(AnonymousTag(), math.MaxInt64)
	if err != nil {
		return
	}
	err = tlvWriter.PutInt(AnonymousTag(), math.MinInt64)
	if err != nil {
		return
	}

	fmt.Printf("%0X", tlvWriter.Bytes())
	return tlvWriter.Bytes(), nil
}

func TestWriterMinMaxInt_Text(t *testing.T) {
	data, err := WriteIntMinMax()
	if err != nil {
		t.Error(err)
	}
	tlvReader := NewReader(bytes.NewReader(data))

	getUint8, err := tlvReader.GetUint8()
	if err != nil {
		return
	}
	assert.Equal(t, math.MaxUint8, getUint8)
	assert.Equal(t, math.MaxUint8, getUint8)
}

func TestTLVReader(t *testing.T) {
	buf := bytes.NewReader(encoding)
	tlvReader := NewReader(buf)
	tlvReader.Next()
}

func TestParseSigma1(t *testing.T) {
	tlvReader := NewReader(bytes.NewReader([]byte("")))
	sigma1, err := secure_channel.ParseSigma1(tlvReader, false)
	if err != nil {
		t.Error(err)
	}
	t.Logf("ParseSigma1: %v", sigma1)

}
